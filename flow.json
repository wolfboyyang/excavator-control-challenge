[
    {
        "id": "d330a0772780126e",
        "type": "tab",
        "label": "Excavator Control Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "55d5cfdcf261b351",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f56460f10e7a933a",
        "type": "ui_tab",
        "name": "Excavator Control",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4efd622c63e10aca",
        "type": "ui_group",
        "name": "Excavator Control",
        "tab": "f56460f10e7a933a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "053402e8dca4bfc3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3d8088649455c252",
        "type": "ui_link",
        "name": "Simulator",
        "link": "https://rwth-crmasters-sose22.gitlab.io/course-material/excavator-simulator/simple.html",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 2
    },
    {
        "id": "289ae65c4da60d3e",
        "type": "ui_group",
        "name": "Joints",
        "tab": "f56460f10e7a933a",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "837bcbb6a5e8e7eb",
        "type": "ui_group",
        "name": "Joystick",
        "tab": "f56460f10e7a933a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1ae082d0b2483fa2",
        "type": "mqtt out",
        "z": "d330a0772780126e",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "0.5",
        "broker": "55d5cfdcf261b351",
        "x": 1470,
        "y": 80,
        "wires": []
    },
    {
        "id": "c57755911112c95b",
        "type": "template",
        "z": "d330a0772780126e",
        "name": "command",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "rwth/bcma/sessions/{{flow.session}}/command",
        "output": "str",
        "x": 1140,
        "y": 80,
        "wires": [
            [
                "7466fa3ba965ce0c"
            ]
        ]
    },
    {
        "id": "5d60698c31d159bc",
        "type": "ui_text_input",
        "z": "d330a0772780126e",
        "name": "",
        "label": "Session",
        "tooltip": "",
        "group": "4efd622c63e10aca",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "session",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 80,
        "y": 80,
        "wires": [
            [
                "4b46c60a88b71feb"
            ]
        ]
    },
    {
        "id": "4b46c60a88b71feb",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "session",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 80,
        "wires": [
            [
                "c57755911112c95b"
            ]
        ]
    },
    {
        "id": "f459b05a8d8fabe5",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "q0 üè†",
        "tooltip": "cabin - spin",
        "group": "4efd622c63e10aca",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "q0",
        "topicType": "str",
        "min": "-3.141592653589793",
        "max": "3.141592653589793",
        "step": "0.001",
        "className": "",
        "x": 550,
        "y": 380,
        "wires": [
            [
                "eeddfc582b622107",
                "b7e4d2a36ad6479f"
            ]
        ]
    },
    {
        "id": "65af2b79ddf2324f",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "q1 üßπ",
        "tooltip": "arm - left/right",
        "group": "4efd622c63e10aca",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "q1",
        "topicType": "str",
        "min": "-0.7853981633974483",
        "max": "0.7853981633974483",
        "step": "0.001",
        "className": "",
        "x": 550,
        "y": 540,
        "wires": [
            [
                "eeddfc582b622107",
                "a124c267bba1e46e",
                "7261840d0fc88c99"
            ]
        ]
    },
    {
        "id": "a0ea133b0fc73149",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "q2 ü¶ø",
        "tooltip": "back arm - up/down",
        "group": "4efd622c63e10aca",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "q2",
        "topicType": "str",
        "min": "-0.2",
        "max": "0",
        "step": "0.001",
        "className": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "eeddfc582b622107",
                "05ea4db146e7a6dc"
            ]
        ]
    },
    {
        "id": "fa1d4dfb8df5ee0b",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "q3 ü¶æ",
        "tooltip": " front arm - up/down",
        "group": "4efd622c63e10aca",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "q3",
        "topicType": "str",
        "min": "-0.41",
        "max": "0",
        "step": "0.001",
        "className": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "eeddfc582b622107",
                "eb0d41062125addc"
            ]
        ]
    },
    {
        "id": "59322520e0d393f1",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "q4 ü•Ñ",
        "tooltip": "shovel",
        "group": "4efd622c63e10aca",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "q4",
        "topicType": "str",
        "min": "-0.32",
        "max": "0",
        "step": "0.001",
        "className": "",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "eeddfc582b622107"
            ]
        ]
    },
    {
        "id": "88aed765ecaf2910",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "q5 üõ°Ô∏è",
        "tooltip": "shield",
        "group": "4efd622c63e10aca",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "q5",
        "topicType": "str",
        "min": "0",
        "max": "0.14",
        "step": "0.01",
        "className": "",
        "x": 550,
        "y": 640,
        "wires": [
            [
                "eeddfc582b622107"
            ]
        ]
    },
    {
        "id": "ec730385ef81bacd",
        "type": "template",
        "z": "d330a0772780126e",
        "name": "set command",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{    \n    \"command\": \"setJointValue\",\n    \"jointName\": \"{{jointName}}\",\n    \"jointValue\": {{jointValue}}\n}",
        "output": "json",
        "x": 920,
        "y": 460,
        "wires": [
            [
                "c57755911112c95b"
            ]
        ]
    },
    {
        "id": "eeddfc582b622107",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "jointValue",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "jointName",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 460,
        "wires": [
            [
                "ec730385ef81bacd"
            ]
        ]
    },
    {
        "id": "24daa82e4e72bbb5",
        "type": "ui_svg_graphics",
        "z": "d330a0772780126e",
        "group": "289ae65c4da60d3e",
        "order": 1,
        "width": "6",
        "height": "6",
        "svgString": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"300\" height=\"300\" viewBox=\"0 0 300 300\" preserveAspectRatio=\"xMidYMid meet\">\n  <rect id=\"svgEditorBackground\" x=\"0\" y=\"0\" width=\"300\" height=\"300\" style=\"fill: none; stroke: none;\"/>\n  <!-- Add here your SVG shapes (circles, rectangles, ...) -->\n  <!-- Or remove everything, if you want to paste an entire drawing (<svg...>...</svg>).-->\n  <polygon style=\"stroke:black;fill:orange;stroke-width:1px\" id=\"e1_polygon\" points=\"34.7591 81.3752 49.7329 74.423 88.1489 74.3416 101.425 81.3752 88.9486 89.575 48.8412 89.0398\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n  <rect x=\"54.280400\" y=\"31.494900\" style=\"fill:black;stroke:black;stroke-width:1px\" id=\"e2_rectangle\" width=\"28.164000\" height=\"29.590000\" ry=\"6.28057\" rx=\"6.28057\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n  \n  <polygon style=\"stroke:black;fill:yellow;stroke-width:1px\" id=\"e7_polygon\" points=\"109.305,9.00636,124.991,5.0844,125.525,6.86741,109.84,11.5013\" transform=\"matrix(1.38064 2.24364 -2.24364 1.38064 105.838 -171.902)\"/>\n  <path d=\"M12.523989,9.953847l-1.25,1.875v-1.25c-10,0,-8,-6.25,0,-6.25v1.25c-10,0,-8,3.75,0,3.75v-1.25Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e10_shape\" transform=\"matrix(1.95035 0 0 1.95035 63.3783 159.871)\"/><text style=\"fill:black;font-family:Arial;font-size:20px\" x=\"-20.8739\" y=\"90.4333\" id=\"e12_texte\" transform=\"matrix(0.647181 0 0 0.647181 66.9537 119.649)\">q0</text>\n  <path d=\"M131.242213,34.404272l10.517,-1.248l-0.178,10.695Z\" style=\"fill:slategray;stroke:black;stroke-width:1px\" id=\"e14_pathH\" transform=\"matrix(1.61848 2.0786 -2.0786 1.61848 124.893 -208.016)\"/><text style=\"fill:black;font-family:Arial;font-size:20px\" x=\"121.086\" y=\"-13.285\" id=\"e2_texte\" transform=\"matrix(0.647181 0 0 0.647181 66.9537 119.649)\">q2</text><text style=\"fill:black;font-family:Arial;font-size:20px\" x=\"238.27\" y=\"-13.2019\" id=\"e1_texte\" transform=\"matrix(0.647181 0 0 0.647181 66.9537 119.649)\">q3</text><text style=\"fill:black;font-family:Arial;font-size:20px\" x=\"298.676\" y=\"22.4731\" id=\"e3_texte\" transform=\"matrix(0.647181 0 0 0.647181 50.9109 123.927)\">q4</text><text style=\"fill:black;font-family:Arial;font-size:20px\" x=\"169.218\" y=\"156.809\" id=\"e4_texte\" transform=\"matrix(0.647181 0 0 0.647181 66.9537 119.649)\">q5</text>\n  <path d=\"M111.937414,77.36697l-0.357,10.517l-7.487,-6.239Z\" style=\"fill:black;stroke:black;stroke-width:1px\" id=\"e16_pathH\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n  <path d=\"M27.653964,36.512168v-2l2,4l-2,4v-2h-4v2l-2,-4l2,-4v2Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e17_shape\" transform=\"matrix(-1.81304 -0.0757995 0.0533943 -1.27717 295.055 204.365)\"/>\n  <path d=\"M-65.312176,34.370298v-2l2,4l-2,4v-2h-4v2l-2,-4l2,-4v2Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e12_shape\" transform=\"matrix(-1.09186 1.44939 -1.02099 -0.769144 201.578 239.761)\"/>\n  <path d=\"M-66.143014,80.867736v-2l2,4l-2,4v-2h-4v2l-2,-4l2,-4v2Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e1_shape\" transform=\"matrix(1.21271 1.34991 -0.950921 0.854266 326.747 113.203)\"/>\n  <path d=\"M-16.318499,7.979807l1.25,-1.875v1.25c10,0,8,6.25,0,6.25v-1.25c10,0,8,-3.75,0,-3.75v1.25Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e18_shape\" transform=\"matrix(1.83076 0 0 1.83076 137.805 156.748)\"/>\n  \n  <text style=\"fill:black;font-family:Arial;font-size:20px\" x=\"157.786\" y=\"44.265\" id=\"e5_texte\" transform=\"matrix(0.647181 0 0 0.647181 66.9537 119.649)\">q1</text>\n  <rect x=\"86.143300\" y=\"56.073900\" style=\"fill:black;stroke:black;stroke-width:1px\" id=\"e19_rectangle\" width=\"3.565500\" height=\"7.308000\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n  <path d=\"M-15.385171,48.473632v-2l2,4l-2,4v-2h-4v2l-2,-4l2,-4v2Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e3_shape\" transform=\"matrix(-1.18893 1.37089 -0.965698 -0.837525 223.92 291.97)\"/>\n  <path d=\"M68.766391,12.149488l-13.191,16.934l26.203,0.357Z\" style=\"fill:orange;stroke:black;stroke-width:1px\" id=\"e21_pathH\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n  <rect x=\"59.242500\" y=\"33.743600\" style=\"fill:orange;stroke:black;stroke-width:1px\" id=\"e22_rectangle\" width=\"19.252300\" height=\"14.439200\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n  <rect x=\"66.81529998779297\" y=\"66.21880340576172\" style=\"fill:black;stroke:black;stroke-width:1px\" id=\"e3_rectangle\" width=\"4.813250\" height=\"7.308000\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/>\n<rect x=\"32.790200\" y=\"151.395000\" style=\"fill:black;stroke:black;stroke-width:1px\" id=\"e1_rectangle\" width=\"118.605000\" height=\"13.954000\"/><path d=\"M-26.926136,-4.289773l1.25,-1.5625v1.25a8,8,0,0,1,6.25,6a2,2,0,0,0,-3.125,0.625a4.6,4.6,0,0,0,-3.125,-5.875v1.25Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e4_shape\" transform=\"matrix(1.94906 0 0 1.94906 203.876 142.569)\"/><path d=\"M-20.840898,1.795451l1.25,-1.5625v1.25a8,8,0,0,1,6.25,6a2,2,0,0,0,-3.125,0.625a4.6,4.6,0,0,0,-3.125,-5.875v1.25Z\" style=\"fill:rosybrown;stroke:black;vector-effect:non-scaling-stroke;stroke-width:1px\" id=\"e11_shape\" transform=\"matrix(1.94906 0 0 -1.94906 192.016 162.314)\"/><polygon style=\"stroke:black;fill:orange;stroke-width:1px\" id=\"e2_polygon\" points=\"87.8844,51.6222,100.005,38.6102,119.078,35.7582,119.613,38.6096,101.61,42.3532,90.0234,56.7916\" transform=\"matrix(2.63439 0 0 2.63439 -85.5948 -11.4463)\"/><circle id=\"e5_circle\" cx=\"231.623\" cy=\"86.5115\" style=\"fill:black;stroke:black;stroke-width:1px\" r=\"6.977000\"/><circle id=\"e2_circle\" cx=\"265.111000\" cy=\"119.302000\" style=\"fill:black;stroke:black;stroke-width:1px\" r=\"6.977000\"/><circle id=\"e1_circle\" cx=\"146.506000\" cy=\"131.860000\" style=\"fill:black;stroke:black;stroke-width:1px\" r=\"9.45653\"/><circle id=\"e3_circle\" cx=\"182.785000\" cy=\"203.721000\" style=\"fill:black;stroke:black;stroke-width:1px\" r=\"6.977000\"/></svg>",
        "clickableShapes": [],
        "javascriptHandlers": [],
        "smilAnimations": [],
        "bindings": [],
        "showCoordinates": false,
        "autoFormatAfterEdit": false,
        "showBrowserErrors": false,
        "showBrowserEvents": false,
        "enableJsDebugging": false,
        "sendMsgWhenLoaded": false,
        "noClickWhenDblClick": false,
        "outputField": "payload",
        "editorUrl": "//drawsvg.org/drawsvg.html",
        "directory": "",
        "panning": "both",
        "zooming": "enabled",
        "panOnlyWhenZoomed": false,
        "doubleClickZoomEnabled": true,
        "mouseWheelZoomEnabled": true,
        "dblClickZoomPercentage": 150,
        "cssString": "div.ui-svg svg{\n    color: var(--nr-dashboard-widgetColor);\n    fill: currentColor !important;\n}\ndiv.ui-svg path {\n    fill: inherit;\n}",
        "name": "Excavator",
        "x": 80,
        "y": 20,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-image"
    },
    {
        "id": "7466fa3ba965ce0c",
        "type": "delay",
        "z": "d330a0772780126e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1300,
        "y": 80,
        "wires": [
            [
                "1ae082d0b2483fa2"
            ]
        ]
    },
    {
        "id": "c4022601d7cdd2d1",
        "type": "debug",
        "z": "d330a0772780126e",
        "name": "expect",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 820,
        "wires": []
    },
    {
        "id": "b6f402485ef9b19d",
        "type": "template",
        "z": "d330a0772780126e",
        "name": "set command",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{    \n    \"command\": \"setTargetPosition\",\n    \"x\": {{flow.x}},\n    \"y\": {{flow.y}},\n    \"z\": {{flow.z}}\n}",
        "output": "json",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "c57755911112c95b",
                "5032cfbe1e3a17bd"
            ]
        ]
    },
    {
        "id": "764bc469d7799bdd",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "x",
        "tooltip": "",
        "group": "4efd622c63e10aca",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "x",
        "topicType": "msg",
        "min": "-2.791",
        "max": "4.151",
        "step": "0.001",
        "className": "",
        "x": 70,
        "y": 160,
        "wires": [
            [
                "41dc7120be26065c"
            ]
        ]
    },
    {
        "id": "41dc7120be26065c",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "x",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "db31b969e4c41384"
            ]
        ]
    },
    {
        "id": "2f78dae91e42cbcc",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "y",
        "tooltip": "",
        "group": "4efd622c63e10aca",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "y",
        "topicType": "msg",
        "min": "-4.101",
        "max": "2.841",
        "step": "0.001",
        "className": "",
        "x": 70,
        "y": 220,
        "wires": [
            [
                "46227a958995f914"
            ]
        ]
    },
    {
        "id": "46227a958995f914",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "y",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "db31b969e4c41384"
            ]
        ]
    },
    {
        "id": "bed7a4edd74a8c13",
        "type": "ui_slider",
        "z": "d330a0772780126e",
        "name": "",
        "label": "z",
        "tooltip": "",
        "group": "4efd622c63e10aca",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "z",
        "topicType": "msg",
        "min": "-0.227",
        "max": "2.930",
        "step": "0.001",
        "className": "",
        "x": 70,
        "y": 280,
        "wires": [
            [
                "b6f2fc55213a29be"
            ]
        ]
    },
    {
        "id": "b6f2fc55213a29be",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "z",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "db31b969e4c41384"
            ]
        ]
    },
    {
        "id": "5032cfbe1e3a17bd",
        "type": "function",
        "z": "d330a0772780126e",
        "name": "inverse kinematic",
        "func": "const rot_z =  [[0, -1, 0],\n                [1,  0, 0],\n                [0,  0, 1]]\n\nconst p0 = [0.68, -0.63, 0.38]\nconst p10 = [0.3, -0.31, 0.08]\nconst p11 = [-0.142, 0.107, 0.02]\nconst p1 = math.chain(rot_z).multiply(p11).add(p10).done();\n// add p3.y to p2.y to make j2,j3,j4 in line when projected to global xy plane\nconst p2 = [-0.17, -0.08 + 0.02, 0.09] // origin p2 [-0.17, -0.08, 0.09]\nconst p3 = [-1.4, 0.02 - 0.02, 1.06] // origin p3 [-1.4, 0.02, 1.06]\nconst p4 = [0.05, 0, -1.14]\n\nconst mq2_range = [-0.4517, 0.46378]\nconst mq3_range = [-0.217, 1.910777]\n\n\ntx = flow.get('x')\nty = flow.get('y')\ntz = flow.get('z')\nj4 = [tx, ty, tz]\n\nfunction length_of_vector(v) {\n    if (math.count(v) == 2)\n        return math.distance(v, [0, 0])\n    else \n        return math.distance(v, [0, 0, 0])\n}\nfunction angle_of_vector(v1, v2){\n    return math.evaluate(`acos(${math.multiply(v1,v2)}/(${length_of_vector(v1)}*${length_of_vector(v2)}))`)\n}\nfunction rotate_axis_z(angle) {\n    return [[math.cos(angle), -math.sin(angle), 0],\n            [math.sin(angle),  math.cos(angle), 0],\n            [              0,                0, 1]]\n}\nfunction rotate_axis_y(angle) {\n    return [[ math.cos(angle), 0, math.sin(angle)],\n            [            0, 1,            0],\n            [-math.sin(angle), 0, math.cos(angle)]]\n}\nq1 = flow.get('q1')\nif(!q1) q1 = 0\n\n// base_link <- Kabine\nj0 = p0\n\n// caluclate q0 in xy plane\n// regardless q0, aj2 and distance of j2 to j0 is fixed \n// aj2 is the angle between -x axis at j2 with j2_j0\n\n// q1 - Kabine <- Bagger_Verbindung_Arm\n//             <- Arm1_zu_BaggerVerbindungArm2\n// in j0 local space (no effect by q0)\nmq1 = rotate_axis_z(q1)\nm1_j0 = math.chain(rot_z).multiply(mq1).done()\nj0_j2_j0 = math.chain(m1_j0).multiply(p2).add(p1).done()\nj0_j2_j0_xy = math.subset(j0_j2_j0, math.index([0,1]))\n\naxis_j4_j2_j0_xy = math.chain(m1_j0).multiply([1,0,0])\n        .subset(math.index([0,1])).done()\naj2 = angle_of_vector(j0_j2_j0_xy, axis_j4_j2_j0_xy)\na = length_of_vector(j0_j2_j0_xy)\n\n// back to global word (from base_link)\nj0_j4_xy = math.chain(j4).subtract(j0)\n        .subset(math.index([0,1])).done()\nc = length_of_vector(j0_j4_xy)\naj4 = math.evaluate(`asin(sin(${aj2})*${a}/${c})`)\naj0 = math.evaluate(`pi - ${aj2} -${aj4}`)\n\n// when q0 = 0\nj0_j4_0_xy = math.chain(rot_z).multiply(rotate_axis_z(-aj0))\n        .multiply(j0_j2_j0)\n        .subset(math.index([0,1])).done()\nsign = math.sign(math.det([j0_j4_0_xy, j0_j4_xy]))\nq0 = sign* angle_of_vector(j0_j4_0_xy, j0_j4_xy)\n\n// q0 is done\n// update j1,j2\n\n// q1 - Kabine <- Bagger_Verbindung_Arm\n//             <- Arm1_zu_BaggerVerbindungArm2\nmq0 = rotate_axis_z(q0)\nm0 = math.chain(rot_z).multiply(mq0).done()\nj1 = math.chain(m0).multiply(p1).add(j0).done()\n\nmq1 = rotate_axis_z(q1)\nm1 = math.chain(m0).multiply(rot_z).multiply(mq1).done()\nj2 = math.chain(m1).multiply(p2).add(j1).done()\n\n// calculate q2, q3 in j2,j4, axis z plane\n// mimic q2 - Arm1_zu_BaggerVerbindungArm2 <- Arm1\nmultiplier = -4.5774\noffset = -0.4517\n\n// when mq2 = 0\nj2_p3_0 = math.chain(m1).multiply(p3).done()\nj2_j4 = math.subtract(j4, j2)\na2_0 = angle_of_vector(j2_j4,j2_p3_0)\n\n// for q2\n// Law of Cosines\n// c^2 = a^2 + b^2 - 2 * a * b * cos(a3)\na = length_of_vector(p3)\nb = length_of_vector(p4)\nc = math.distance(j4, j2)\n\na3 = math.evaluate(`acos((${a}^2+${b}^2-${c}^2)/(2*${a}*${b}))`)\n// Law of Sines\n// c/sin(a3) = a/sin(a4) = b/sin(a2)\na2 = math.evaluate(`asin(sin(${a3})*${b}/${c})`)\n\nj2_j4 = math.subtract(j4, j2)\n// in local space of j2\n// j2_p3_v_j2 || mmq2 * p3\nm1_trans = math.transpose(m1)\nj2_p3_v_j2 = math.chain(rotate_axis_y(a2)).multiply(m1_trans)\n        .multiply(j2_j4).done()\nsign = math.sign(math.chain(p3).cross(j2_p3_v_j2).multiply([0,1,0]).done())\nmq2 = sign * angle_of_vector(p3, j2_p3_v_j2)\n\nmq2 = clamp(mq2, mq2_range[0], mq2_range[1])\n// For forward kinematic, q2 = q2 * multiplier + offset\n// For inverse kinematic\nq2 = (mq2 - offset) / multiplier\n\nmmq2 = rotate_axis_y(mq2)\nm2 = math.chain(m1).multiply(mmq2).done();\n\nj3 = math.chain(m2).multiply(p3).add(j2).done()\n\n// mimic q3 - Arm1 <- Arm2\nmultiplier = -5.1897\noffset = -0.217\n\n// calculate q3\n// when mq3 = 0\nj3_j4 = math.subtract(j4, j3)\n// in local space of j4\n// j3_p4_v_j3 || mmq3 * p4\nm2_trans = math.transpose(m2)\nj3_p4_v_j3 = math.multiply(m2_trans, j3_j4)\nsign = math.sign(math.chain(p4).cross(j3_p4_v_j3).multiply([0,1,0]).done())\nmq3 = sign * angle_of_vector(p4, j3_p4_v_j3)\n\nmq3 = clamp(mq3, mq3_range[0], mq3_range[1])\n// For forward kinematic, mq3 = q3 * multiplier + offset\n// For inverse kinematic\n\nq3 = (mq3 - offset) / multiplier\n\nmmq3 = rotate_axis_y(mq3)\nm3 = math.chain(m2).multiply(mmq3).done();\n\nj4 = math.chain(m3).multiply(p4).add(j3).done()\n// Arm2 <- Loeffel\n// target is j4 where Loeffel attached \n\ndp = j4\n\nflow.set('dx', dp[0])\nflow.set('dy', dp[1])\nflow.set('dz', dp[2])\n\noutputMsgs = []\noutputMsgs.push({payload: q0})\noutputMsgs.push({payload: q1})\noutputMsgs.push({payload: q2})\noutputMsgs.push({payload: q3})\n\nreturn outputMsgs;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "math",
                "module": "mathjs"
            },
            {
                "var": "clamp",
                "module": "clamp"
            }
        ],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "0af73d57d39283f2",
                "f459b05a8d8fabe5"
            ],
            [],
            [
                "a0ea133b0fc73149"
            ],
            [
                "fa1d4dfb8df5ee0b"
            ],
            []
        ],
        "outputLabels": [
            "q0",
            "q1",
            "q2",
            "q3",
            ""
        ]
    },
    {
        "id": "12ee300a7adda352",
        "type": "template",
        "z": "d330a0772780126e",
        "name": "set setDummyPosition",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{    \n    \"command\": \"setDummyPosition\",\n    \"x\": {{flow.dx}},\n    \"y\": {{flow.dy}},\n    \"z\": {{flow.dz}}\n}",
        "output": "json",
        "x": 880,
        "y": 320,
        "wires": [
            [
                "c57755911112c95b"
            ]
        ]
    },
    {
        "id": "db31b969e4c41384",
        "type": "function",
        "z": "d330a0772780126e",
        "name": "init target",
        "func": "if (!flow.get('x')) flow.set('x',0)\nif (!flow.get('y')) flow.set('y',0)\nif (!flow.get('z')) flow.set('z',0)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "b6f402485ef9b19d"
            ]
        ]
    },
    {
        "id": "1cddd29606550017",
        "type": "function",
        "z": "d330a0772780126e",
        "name": "kinematic",
        "func": "const rot_z =  [[0, -1, 0],\n                [1,  0, 0],\n                [0,  0, 1]]\n\nconst p0 = [0.68, -0.63, 0.38]\nconst p10 = [0.3, -0.31, 0.08]\nconst p11 = [-0.142, 0.107, 0.02]\nconst p1 = math.chain(rot_z).multiply(p11).add(p10).done();\n// add p3.y to p2.y to make j2,j3,j4 in line when projected to global xy plane\nconst p2 = [-0.17, -0.08 + 0.02, 0.09] // origin p2 [-0.17, -0.08, 0.09]\nconst p3 = [-1.4, 0.02 - 0.02, 1.06] // origin p3 [-1.4, 0.02, 1.06]\nconst p4 = [0.05, 0, -1.14]\n\nconst mq2_range = [-0.4517, 0.46378]\nconst mq3_range = [-0.217, 1.910777]\n\n//tx = flow.get('x')\n//ty = flow.get('y')\n//tz = flow.get('z')\n//j4 = [tx, ty, tz]\n\nq0 = flow.get('q0')\nq1 = flow.get('q1')\nq2 = flow.get('q2')\nq3 = flow.get('q3')\n\nif(!q0) q0 = 0\nif(!q1) q1 = 0\nif(!q2) q2 = 0\nif(!q3) q3 = 0\n\nfunction length_of_vector(v) {\n    if (math.count(v) == 2)\n        return math.distance(v, [0, 0])\n    else \n        return math.distance(v, [0, 0, 0])\n}\nfunction angle_of_vector(v1, v2){\n    return math.evaluate(`acos(${math.multiply(v1,v2)}/(${length_of_vector(v1)}*${length_of_vector(v2)}))`)\n}\nfunction rotate_axis_z(angle) {\n    return [[math.cos(angle), -math.sin(angle), 0],\n            [math.sin(angle),  math.cos(angle), 0],\n            [              0,                0, 1]]\n}\nfunction rotate_axis_y(angle) {\n    return [[ math.cos(angle), 0, math.sin(angle)],\n            [            0, 1,            0],\n            [-math.sin(angle), 0, math.cos(angle)]]\n}\n\n// base_link <- Kabine\nj0 = p0\n\n// q1 - Kabine <- Bagger_Verbindung_Arm\n//             <- Arm1_zu_BaggerVerbindungArm2\nmq0 = rotate_axis_z(q0)\nm0 = math.chain(rot_z).multiply(mq0).done()\nj1 = math.chain(m0).multiply(p1).add(j0).done()\n\nmq1 = rotate_axis_z(q1)\nm1 = math.chain(m0).multiply(rot_z).multiply(mq1).done()\nj2 = math.chain(m1).multiply(p2).add(j1).done()\n\n// calculate q2, q3 in xz plane\n// mimic q2 - Arm1_zu_BaggerVerbindungArm2 <- Arm1\nmultiplier = -4.5774\noffset = -0.4517\n// For forward kinematic, q2 = q2 * multiplier + offset\n// For inverse kinematic\nmq2 = q2 * multiplier + offset\n\nmmq2 = rotate_axis_y(mq2)\nm2 = math.chain(m1).multiply(mmq2).done();\n\nj3 = math.chain(m2).multiply(p3).add(j2).done()\n\n// mimic q3 - Arm1 <- Arm2\nmultiplier = -5.1897\noffset = -0.217\n\n// For forward kinematic, mq3 = q3 * multiplier + offset\n// For inverse kinematic\nmq3 = q3 * multiplier + offset\n\nmmq3 = rotate_axis_y(mq3)\nm3 = math.chain(m2).multiply(mmq3).done();\n\nj4 = math.chain(m3).multiply(p4).add(j3).done()\n// Arm2 <- Loeffel\n// target is j4 where Loeffel attached \n\ndp = j4\n\ndx = dp[0]\ndy = dp[1]\ndz = dp[2]\n\nmsg.payload = {q0,q1,q2, q3, dx, dy, dz}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "math",
                "module": "mathjs"
            }
        ],
        "x": 920,
        "y": 820,
        "wires": [
            [
                "c4022601d7cdd2d1"
            ]
        ]
    },
    {
        "id": "b7e4d2a36ad6479f",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "q0",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 760,
        "wires": [
            [
                "1cddd29606550017"
            ]
        ]
    },
    {
        "id": "a124c267bba1e46e",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "q1",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 880,
        "wires": [
            [
                "1cddd29606550017"
            ]
        ]
    },
    {
        "id": "05ea4db146e7a6dc",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "q2",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 800,
        "wires": [
            [
                "1cddd29606550017"
            ]
        ]
    },
    {
        "id": "eb0d41062125addc",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "q3",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 840,
        "wires": [
            [
                "1cddd29606550017"
            ]
        ]
    },
    {
        "id": "0af73d57d39283f2",
        "type": "function",
        "z": "d330a0772780126e",
        "name": "init dummyTarget",
        "func": "if (!flow.get('dx')) flow.set('dx',0)\nif (!flow.get('dy')) flow.set('dy',0)\nif (!flow.get('dz')) flow.set('dz',0)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 320,
        "wires": [
            [
                "12ee300a7adda352"
            ]
        ]
    },
    {
        "id": "7261840d0fc88c99",
        "type": "change",
        "z": "d330a0772780126e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "q1",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "5032cfbe1e3a17bd"
            ]
        ]
    }
]